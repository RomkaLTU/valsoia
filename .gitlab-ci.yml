image: docker:latest

services:
  - docker:dind

stages:
  - build-deploy

.build:
  tags:
    - docker
    - dind
  stage: build-deploy
  image: composer:2.3
  before_script:
    - apk add --update nodejs npm
    - npm install gulp -g
    - npm install yarn -g
    # root composer install 
    - composer install --no-interaction --no-dev --prefer-dist --optimize-autoloader
    # Build theme
    - pushd web/app/themes/codesome/
    - composer install --no-interaction --no-dev --prefer-dist --optimize-autoloader
    - yarn && yarn build
    # - gulp build
    # - rm -rf node_modules
    - popd

################################################################################
### STAGE
################################################################################

.stage:
  environment:
    name: stage
    url: https://staging.valsoia.com/
  variables:
    ENV: stage
    REMOTE_FOLDER: "$STAGE_SERVER_PATH"
    SERVER_USER: "$STAGE_SERVER_USER"
    SERVER_HOST: "$STAGE_SERVER_HOST"
    SERVER_PASSWORD: "$STAGE_SERVER_PASSWORD"
    DB_PASSWORD: "$STAGE_DB_PASSWORD"
  only:
    refs:
      - stage
      - feature/enable-cicd


build-deploy stage:
  extends:
    - .build
    - .stage
  script:
    - apk add --update openssh-client sshpass rsync

    - DB_PASSWORD=$(echo $DB_PASSWORD | sed -e 's/\\/\\\\/g; s/\//\\\//g; s/&/\\\&/g')
    - sed -i'' -e "s/%%DATABASE_PASSWORD%%/$DB_PASSWORD/" docker/stage/.env
    - cp docker/stage/.env .
    - rm -rf docker

    # Fix permissions
    - find . -type d -exec chmod 775 {} \;
    - find . -type f -exec chmod 664 {} \;

    # Sync files
    - echo "$SERVER_USER@$SERVER_HOST"
    - sshpass -p $SERVER_PASSWORD ssh -oStrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "ls -la $REMOTE_FOLDER"
    - sshpass -p $SERVER_PASSWORD rsync -avz --no-owner --no-group --omit-dir-times ./ $SERVER_USER@$SERVER_HOST:$REMOTE_FOLDER/

################################################################################
### PROD
################################################################################

# .prod:
#   environment:
#     name: prod
#     url: https://www.hibo.it/
#   variables:
#     ENV: prod
#     REMOTE_FOLDER: "$PROD_SERVER_PATH"
#     SERVER_USER: "$PROD_SERVER_USER"
#     SERVER_HOST: "$PROD_SERVER_HOST"
#     DB_PASSWORD: "$PROD_DB_PASSWORD"
#     SERVER_PASSWORD: "$PROD_SERVER_PASSWORD"
#   only:
#     refs:
#       - prod

# build-deploy prod:
#   extends:
#     - .build
#     - .prod
#   script:
#     - apt update
#     - apt install -y --no-install-recommends openssh-client sshpass rsync

#     - DB_PASSWORD=$(echo $DB_PASSWORD | sed -e 's/\\/\\\\/g; s/\//\\\//g; s/&/\\\&/g')
#     - sed -i'' -e "s/%%DATABASE_PASSWORD%%/$DB_PASSWORD/" docker/config/prod/wp-config.php
#     - cp docker/config/prod/wp-config.php .

#     # Fix permissions
#     - find . -type d -exec chmod 775 {} \;
#     - find . -type f -exec chmod 664 {} \;

#     # Sync files
#     - echo "$SERVER_USER@$SERVER_HOST:wp-content/plugins"
#     - sshpass -p $SERVER_PASSWORD ssh -oStrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "ls -la $REMOTE_FOLDER"
#     - sshpass -p $SERVER_PASSWORD scp wp-config.php $SERVER_USER@$SERVER_HOST:$REMOTE_FOLDER/wp-config.php
#     - sshpass -p $SERVER_PASSWORD rsync -avz --no-owner --no-group --omit-dir-times wp-content/plugins/ $SERVER_USER@$SERVER_HOST:$REMOTE_FOLDER/wp-content/plugins
#     - sshpass -p $SERVER_PASSWORD rsync -avz --no-owner --no-group --omit-dir-times wp-content/themes/ $SERVER_USER@$SERVER_HOST:$REMOTE_FOLDER/wp-content/themes
